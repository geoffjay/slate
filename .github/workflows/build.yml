name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install base dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            meson \
            ninja-build \
            valac \
            libglib2.0-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            libsqlite3-dev \
            libgee-0.8-dev \
            libpeas-dev \
            gobject-introspection \
            libgirepository1.0-dev \
            python3-pip

      - name: Install Python dependencies for gi-docgen
        run: |
          pip3 install jinja2 markdown markupsafe pygments typogrify

      - name: Configure build (with subprojects)
        run: |
          meson setup builddir \
            -Dgtk_doc=true \
            -Dintrospection=true \
            --wrap-mode=forcefallback

      - name: Build project
        run: meson compile -C builddir

      - name: Run tests
        run: meson test -C builddir --verbose

      - name: Generate test coverage
        run: |
          cd builddir
          ninja coverage-html || echo "Coverage generation skipped (requires gcov)"

      - name: Run static analysis
        run: |
          # Install additional analysis tools
          sudo apt-get install -y cppcheck clang-tidy
          # Run static analysis on C code
          find src -name "*.c" -exec cppcheck --enable=all --inconclusive {} \; || true

      - name: Check for memory leaks (valgrind)
        run: |
          sudo apt-get install -y valgrind
          cd builddir
          # Run basic memory check on main executable
          timeout 30s valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./src/slate/slate --help || echo "Valgrind check completed"

      - name: Package application
        run: |
          cd builddir
          meson dist --no-tests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slate-ubuntu-build
          path: |
            builddir/meson-dist/
            builddir/src/slate/slate
          retention-days: 30

  build-fedora:
    runs-on: ubuntu-latest
    container: fedora:latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          dnf install -y \
            gcc \
            meson \
            ninja-build \
            vala \
            glib2-devel \
            gtk4-devel \
            libadwaita-devel \
            sqlite-devel \
            libgee-devel \
            libpeas-devel \
            gobject-introspection-devel \
            python3-pip \
            git

      - name: Install Python dependencies for gi-docgen
        run: |
          pip3 install jinja2 markdown markupsafe pygments typogrify

      - name: Configure build (force subprojects)
        run: |
          meson setup builddir \
            -Dgtk_doc=true \
            -Dintrospection=true \
            --wrap-mode=forcefallback

      - name: Build project
        run: meson compile -C builddir

      - name: Run tests
        run: meson test -C builddir --verbose

      - name: Package application (Fedora)
        run: |
          cd builddir
          meson dist --no-tests

      - name: Upload Fedora build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slate-fedora-build
          path: |
            builddir/meson-dist/
            builddir/src/slate/slate
          retention-days: 30

  build-minimal:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install minimal dependencies (no blueprint-compiler)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            meson \
            ninja-build \
            valac \
            libglib2.0-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            libsqlite3-dev \
            libgee-0.8-dev \
            libpeas-dev \
            gobject-introspection \
            libgirepository1.0-dev \
            python3-pip
          # Intentionally NOT installing blueprint-compiler to test subproject fallback

      - name: Install Python dependencies for gi-docgen
        run: |
          pip3 install jinja2 markdown markupsafe pygments typogrify

      - name: Configure build (should use blueprint-compiler subproject)
        run: |
          meson setup builddir \
            -Dgtk_doc=true \
            -Dintrospection=true

      - name: Build project
        run: meson compile -C builddir

      - name: Verify subprojects were used
        run: |
          echo "Checking if blueprint-compiler subproject was used..."
          ls -la builddir/subprojects/
          test -d builddir/subprojects/blueprint-compiler

      - name: Upload minimal build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slate-minimal-build
          path: |
            builddir/meson-dist/
            builddir/src/slate/slate
          retention-days: 30

  # New job for comprehensive quality checks
  quality-checks:
    runs-on: ubuntu-latest
    needs: [build-ubuntu]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slate-ubuntu-build
          path: artifacts/

      - name: Install quality tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-format \
            shellcheck \
            yamllint

      - name: Check code formatting
        run: |
          find src -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "Code formatting issues found"

      - name: Lint shell scripts
        run: |
          find . -name "*.sh" -exec shellcheck {} \; || echo "Shell script issues found"

      - name: Lint YAML files
        run: |
          yamllint .github/workflows/ || echo "YAML formatting issues found"

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments:"
          grep -r "TODO\|FIXME" src/ || echo "No TODO/FIXME comments found"
